generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(cuid())
  clerkId             String               @unique
  email               String               @unique
  username            String               @unique
  photo               String
  firstName           String?
  lastName            String?
  stripeCustomerId    String?
  planId              Int                  @default(1)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  ledger              CreditLedger[]
  jobQuotes           JobQuote[]
  jobs                Job[]
  organizationMembers OrganizationMember[]
  transactions        Transaction[]

  @@map("users")
}

model Organization {
  id        String               @id @default(cuid())
  clerkId   String               @unique
  name      String
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  credits   CreditBalance?
  ledger    CreditLedger[]
  jobQuotes JobQuote[]
  jobs      Job[]
  members   OrganizationMember[]
  priceBook PriceBookEntry[]

  @@map("organizations")
}

model OrganizationMember {
  id             String       @id @default(cuid())
  organizationId String
  userId         String
  role           String       @default("member")
  createdAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@map("organization_members")
}

model CreditBalance {
  id                  String       @id @default(cuid())
  organizationId      String       @unique
  balance             Int          @default(0)
  lowBalanceThreshold Int          @default(10)
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  organization        Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("credit_balances")
}

model CreditLedger {
  id             String       @id @default(cuid())
  organizationId String
  userId         String?
  jobId          String?
  type           String
  amount         Int
  reason         String
  metadata       Json?
  createdAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User?        @relation(fields: [userId], references: [id])

  @@map("credit_ledger")
}

model PriceBookEntry {
  id                  String       @id @default(cuid())
  organizationId      String
  actionKey           String
  unitType            String
  unitStep            Int          @default(1)
  retailCostPerUnit   Int
  internalCostFormula String
  isActive            Boolean      @default(true)
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  organization        Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, actionKey])
  @@map("price_book")
}

model Job {
  id                     String       @id @default(cuid())
  organizationId         String
  userId                 String
  workflowId             String?
  status                 String       @default("pending")
  title                  String
  description            String?
  quotedCredits          Int?
  quotedAt               DateTime?
  confirmedAt            DateTime?
  startedAt              DateTime?
  completedAt            DateTime?
  failedAt               DateTime?
  totalInternalCostUsd   Float?
  totalRetailCostCredits Int?
  resultUrl              String?
  errorMessage           String?
  metadata               Json?
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  organization           Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user                   User         @relation(fields: [userId], references: [id])

  @@map("jobs")
}

model Transaction {
  id        String   @id @default(cuid())
  userId    String
  stripeId  String   @unique
  amount    Float
  plan      String?
  credits   Int?
  status    String   @default("completed")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model JobQuote {
  id             String       @id @default(cuid())
  organizationId String
  userId         String
  workflowType   String
  parameters     Json
  totalCredits   Int
  breakdown      Json
  expiresAt      DateTime
  status         String       @default("active")
  createdAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id])

  @@map("job_quotes")
}
